dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/tos.c)

. $srcdir/OTOSIS-VERSION

dnl libtool versioning
LT_RELEASE=$OTOSIS_MAJOR_VERSION.$OTOSIS_MINOR_VERSION
LT_CURRENT=`expr $OTOSIS_MAJOR_VERSION + $OTOSIS_MINOR_VERSION`
LT_REVISION=$OTOSIS_MICRO_VERSION
LT_AGE=$OTOSIS_MINOR_VERSION
LT_VERSION_INFO="-version-info $LT_CURRENT:$LT_REVISION:$LT_AGE"

dnl Check system type
AC_CANONICAL_SYSTEM

dnl Initialize automake macros
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

dnl Make a header with the things we find.
AM_CONFIG_HEADER(config.h)

dnl Set CFLAGS
CFLAGS="$CFLAGS"

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET

dnl Use this instead of AC_PROG_RANLIB because
dnl this works with cross-compiling.
AC_CHECK_TOOL(RANLIB, ranlib, :)

dnl Use libtool to create libotosis
AM_PROG_LIBTOOL

dnl Checks for libraries.
AC_CHECK_LIB(ocpuis,main)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h sys/time.h unistd.h)

dnl Check if system is big endian
AC_C_BIGENDIAN

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_STRUCT_ST_BLKSIZE
AC_STRUCT_ST_BLOCKS
AC_DECL_SYS_SIGLIST
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_FUNC_FNMATCH
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_MMAP
dnl AC_FUNC_SETVBUF_REVERSED
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(getcwd mkdir rmdir select strerror strspn strtol)

if test x$with_otosis = x ; then 
  # Look for separately installed otosis

  AM_PATH_OTOSIS(0.31.0,,
    AC_MSG_ERROR([
*** otosis 0.31.0 or better is required. The latest version of otosis
*** is always available from ftp://ftp.nocrew.org.]),
    libotosis)

  otosis_cflags=$OTOSIS_CFLAGS
  otosis_libs=$OTOSIS_LIBS
else
  # Use uninstalled otosis (assume they got the version right)

  if test -x $with_otosis/otosis-config ; then 
    :
  else
    AC_MSG_ERROR([otosis directory ($with_otosis) not present or not configured])
  fi

  # canonicalize relative paths
  case $with_otosis in 
    /*)
      otosis_dir=$with_otosis
      ;;
    *)
      otosis_dir="\$(top_builddir)/$with_otosis"
      ;;
  esac

  OTOSIS_CFLAGS="-I$otosis_dir"
  OTOSIS_LIBS=$otosis_dir/libotosis.la
fi

if test x$with_oaesis = x ; then
  # Look for separately installed oaesis

  AM_PATH_OAESIS(0.91.0,,
    AC_MSG_ERROR([
*** oaesis 0.91.0 or better is required. The latest version of oaesis
*** is always available from ftp://ftp.nocrew.org.]),
    liboaesis)

  oaesis_cflags=$OAESIS_CFLAGS
  oaesis_libs=$OAESIS_LIBS
else
  # Use uninstalled oaesis (assume they got the version right)

  if test -x $with_oaesis/oaesis-config ; then 
    :
  else
    AC_MSG_ERROR([oaesis directory ($with_oaesis) not present or not configured])
  fi

  # canonicalize relative paths
  case $with_oaesis in 
    /*)
      oaesis_dir=$with_oaesis
      ;;
    *)
      oaesis_dir="\$(top_builddir)/$with_oaesis"
      ;;
  esac

  OAESIS_CFLAGS="-I$oaesis_dir"
  OAESIS_LIBS=$oaesis_dir/liboaesis.la
fi

dnl This is needed for AC_CHECK_HEADERS to find the otosis 
dnl and the oaesis headers
CPPFLAGS="$CPPFLAGS $OTOSIS_CFLAGS $OAESIS_CFLAGS"

OSISINCLUDE=${includedir}/osis

dnl Define version in config.h
AC_DEFINE_UNQUOTED(OTOSIS_VERSION, "$OTOSIS_MAJOR_VERSION.$OTOSIS_MINOR_VERSION")
AC_DEFINE_UNQUOTED(OTOSIS_VERSION_MAJOR, $OTOSIS_MAJOR_VERSION)
AC_DEFINE_UNQUOTED(OTOSIS_VERSION_MINOR, $OTOSIS_MINOR_VERSION)

dnl Specify which variables that should be exchanged
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_SUBST(OSISINCLUDE)
AC_SUBST(LT_VERSION_INFO)

AC_OUTPUT(Makefile \
	src/Makefile \
	doc/Makefile
)
